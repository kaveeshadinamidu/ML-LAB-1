# -*- coding: utf-8 -*-
"""ML_LAB_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gUSNCxJ_AgjOfS21V2yI01ZFF98_SSuQ
"""

import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

valid_data = pd.read_csv('/content/drive/MyDrive/ML_LAB_1/valid.csv')
train_data = pd.read_csv('/content/drive/MyDrive/ML_LAB_1/train.csv')

"""Reading the data from Google drive. valid.csv, train.csv files are stored inside ML_LAB_1 folder."""

print(len(train_data))
print(len(valid_data))

valid_data.head()

train_data.head()

labels = ['label_1','label_2','label_3','label_4']
train_data['label_1'].value_counts()

train_data['label_2'].value_counts()

train_data['label_3'].value_counts()

train_data['label_4'].value_counts()

train_data.info()

train_data.describe()

from sklearn.preprocessing import RobustScaler

features = train_data.columns.values.tolist()[:-4]

scaler = RobustScaler()

x_train = {}
y_train = {}
x_valid = {}
y_valid = {}

for label in labels:
  if label == 'label_2':
    train_df = train_data[train_data['label_2'].notna()]
    valid_df = valid_data[valid_data['label_2'].notna()]
  else:
    train_df = train_data
    valid_df = valid_data

  x_train[label] = pd.DataFrame(scaler.fit_transform(train_df
                                                     .drop(labels, axis=1)),
                                 columns = features)
  x_valid[label] = pd.DataFrame(scaler.transform(valid_df
                                                 .drop(labels, axis=1)),
                                columns = features)
  y_train[label] = train_df[label]
  y_valid[label] = valid_df[label]

y_train['label_2']

from sklearn import svm

clf_1 = svm.SVC()
clf_1.fit(x_train['label_1'], y_train['label_1'])

clf_2 = svm.SVC()
clf_2.fit(x_train['label_2'], y_train['label_2'])

clf_3 = svm.SVC()
clf_3.fit(x_train['label_3'], y_train['label_3'])

clf_4 = svm.SVC()
clf_4.fit(x_train['label_4'], y_train['label_4'])

from sklearn import metrics

pred_l1_1 = clf_1.predict(x_valid['label_1'])

print(metrics.accuracy_score(y_valid['label_1'], pred_l1_1))

pred_l2_1 = clf_2.predict(x_valid['label_2'])

print(metrics.accuracy_score(y_valid['label_2'], pred_l2_1))

pred_l3_1 = clf_3.predict(x_valid['label_3'])

print(metrics.accuracy_score(y_valid['label_3'], pred_l3_1))

pred_l4_1 = clf_4.predict(x_valid['label_4'])

print(metrics.accuracy_score(y_valid['label_4'], pred_l4_1))

print(metrics.confusion_matrix(y_valid['label_1'], pred_l1_1))

print(metrics.confusion_matrix(y_valid['label_2'], pred_l2_1))

print(metrics.confusion_matrix(y_valid['label_3'], pred_l3_1))

print(metrics.confusion_matrix(y_valid['label_4'], pred_l4_1))

print(metrics.precision_score(y_valid['label_1'], pred_l1_1, average="weighted"))

print(metrics.precision_score(y_valid['label_2'], pred_l2_1, average="weighted"))

print(metrics.precision_score(y_valid['label_3'], pred_l3_1, average="weighted"))

print(metrics.precision_score(y_valid['label_4'], pred_l4_1, average="weighted"))

print(metrics.recall_score(y_valid['label_1'], pred_l1_1, average="weighted"))

print(metrics.recall_score(y_valid['label_2'], pred_l2_1, average="weighted"))

print(metrics.recall_score(y_valid['label_3'], pred_l3_1, average="weighted"))

print(metrics.recall_score(y_valid['label_4'], pred_l4_1, average="weighted"))

from sklearn.feature_selection import SelectKBest, f_classif

selector_1 = SelectKBest(f_classif, k = 150)
x_1 = selector_1.fit_transform(x_train['label_1'], y_train['label_1'])

clf_1 = svm.SVC()
clf_1.fit(x_1, y_train['label_1'])
predict_1 = clf_1.predict(selector_1.transform(x_valid['label_1']))

print(metrics.accuracy_score(y_valid['label_1'], predict_1))

from sklearn.svm import LinearSVC
from sklearn.feature_selection import SelectFromModel

lsvc = LinearSVC(C=0.01, penalty="l1", dual=False).fit(x_train['label_1'],
                                                       y_train['label_1'])
model = SelectFromModel(lsvc, prefit=True)
x_2 = model.transform(x_train['label_1'])

clf = svm.SVC()
clf.fit(x_2, y_train['label_1'])
predict_2 = clf.predict(model.transform(x_valid['label_1']))

print(metrics.accuracy_score(y_valid['label_1'], predict_2))

from sklearn.decomposition import PCA

pca_l1 = PCA(n_components=0.99,svd_solver='full')
pca_l1.fit(x_train['label_1'])

x_train_trans_l1 = pd.DataFrame(pca_l1.transform(x_train['label_1']))
x_valid_trans_l1 = pd.DataFrame(pca_l1.transform(x_valid['label_1']))

clf_l1 = svm.SVC()
clf_l1.fit(x_train_trans_l1, y_train['label_1'])

pred_3_l1 = clf_l1.predict(x_valid_trans_l1)

print(metrics.accuracy_score(y_valid['label_1'], pred_3_l1))

print(metrics.confusion_matrix(y_valid['label_1'], pred_3_l1))

print(metrics.precision_score(y_valid['label_1'], pred_3_l1, average="weighted"))

print(metrics.recall_score(y_valid['label_1'], pred_3_l1, average="weighted"))

from sklearn.decomposition import PCA

pca_l2 = PCA(n_components=0.99,svd_solver='full')
pca_l2.fit(x_train['label_2'])

x_train_trans_l2 = pd.DataFrame(pca_l2.transform(x_train['label_2']))
x_valid_trans_l2 = pd.DataFrame(pca_l2.transform(x_valid['label_2']))

clf_l2 = svm.SVC()
clf_l2.fit(x_train_trans_l2, y_train['label_2'])

pred_3_l2 = clf_l2.predict(x_valid_trans_l2)

print(metrics.accuracy_score(y_valid['label_2'], pred_3_l2))

print(metrics.confusion_matrix(y_valid['label_2'], pred_3_l2))

print(metrics.precision_score(y_valid['label_2'], pred_3_l2, average="weighted"))

print(metrics.recall_score(y_valid['label_2'], pred_3_l2, average="weighted"))

from sklearn.decomposition import PCA

pca_l3 = PCA(n_components=0.99,svd_solver='full')
pca_l3.fit(x_train['label_3'])

x_train_trans_l3 = pd.DataFrame(pca_l3.transform(x_train['label_3']))
x_valid_trans_l3 = pd.DataFrame(pca_l3.transform(x_valid['label_3']))

clf_l3 = svm.SVC()
clf_l3.fit(x_train_trans_l3, y_train['label_3'])

pred_3_l3 = clf_l3.predict(x_valid_trans_l3)

print(metrics.accuracy_score(y_valid['label_3'], pred_3_l3))

print(metrics.confusion_matrix(y_valid['label_3'], pred_3_l3))

print(metrics.precision_score(y_valid['label_3'], pred_3_l3, average="weighted"))

print(metrics.recall_score(y_valid['label_3'], pred_3_l3, average="weighted"))

from sklearn.decomposition import PCA

pca_l4 = PCA(n_components=0.99,svd_solver='full')
pca_l4.fit(x_train['label_4'])

x_train_trans_l4 = pd.DataFrame(pca_l4.transform(x_train['label_4']))
x_valid_trans_l4 = pd.DataFrame(pca_l4.transform(x_valid['label_4']))

clf_l4 = svm.SVC()
clf_l4.fit(x_train_trans_l4, y_train['label_4'])

pred_3_l4 = clf_l4.predict(x_valid_trans_l4)

print(metrics.accuracy_score(y_valid['label_4'], pred_3_l4))

print(metrics.confusion_matrix(y_valid['label_4'], pred_3_l4))

print(metrics.precision_score(y_valid['label_4'], pred_3_l4, average="weighted"))

print(metrics.recall_score(y_valid['label_4'], pred_3_l4, average="weighted"))

print(x_1.shape, x_2.shape, x_train_trans_l1.shape)

print(x_train_trans_l1.shape[1])

test_data = pd.read_csv('/content/drive/MyDrive/ML_LAB_1/test_data.csv')
test_data

x_test = {}

test_data_frame = test_data

for label in labels:
  x_test[label] = pd.DataFrame(scaler.fit_transform(test_data_frame
                                                    .drop(labels, axis=1)),
                               columns = features)

pred_l1 = clf_1.predict(x_test['label_1'])

pred_l2 = clf_2.predict(x_test['label_2'])

pred_l3 = clf_3.predict(x_test['label_3'])

pred_l4 = clf_4.predict(x_test['label_4'])

from sklearn.decomposition import PCA

pca_l1 = PCA(n_components=0.99,svd_solver='full')
pca_l1.fit(x_train['label_1'])

x_t_trans_l1 = pd.DataFrame(pca_l1.transform(x_train['label_1']))
x_v_trans_l1 = pd.DataFrame(pca_l1.transform(x_test['label_1']))

from sklearn.decomposition import PCA

pca_l2 = PCA(n_components=0.99,svd_solver='full')
pca_l2.fit(x_train['label_2'])

x_t_trans_l2 = pd.DataFrame(pca_l2.transform(x_train['label_2']))
x_v_trans_l2 = pd.DataFrame(pca_l2.transform(x_test['label_2']))

from sklearn.decomposition import PCA

pca_l3 = PCA(n_components=0.99,svd_solver='full')
pca_l3.fit(x_train['label_3'])

x_t_trans_l3 = pd.DataFrame(pca_l3.transform(x_train['label_3']))
x_v_trans_l3 = pd.DataFrame(pca_l3.transform(x_test['label_3']))

from sklearn.decomposition import PCA

pca_l4 = PCA(n_components=0.99,svd_solver='full')
pca_l4.fit(x_train['label_4'])

x_t_trans_l4 = pd.DataFrame(pca_l4.transform(x_train['label_4']))
x_v_trans_l4 = pd.DataFrame(pca_l4.transform(x_test['label_4']))

clf_l1 = svm.SVC()
clf_l1.fit(x_t_trans_l1, y_train['label_1'])

pred_3_l1 = clf_l1.predict(x_v_trans_l1)

clf_l2 = svm.SVC()
clf_l2.fit(x_t_trans_l2, y_train['label_2'])

pred_3_l2 = clf_l2.predict(x_v_trans_l2)

clf_l3 = svm.SVC()
clf_l3.fit(x_t_trans_l3, y_train['label_3'])

pred_3_l3 = clf_l3.predict(x_v_trans_l3)

clf_l4 = svm.SVC()
clf_l4.fit(x_t_trans_l4, y_train['label_4'])

pred_3_l4 = clf_l4.predict(x_v_trans_l4)

data_l1 = pd.DataFrame({'Predicted labels before feature engineering':pred_l1_1, 'Predicted labels after feature engineering':pred_3_l1, 'No of new features':x_t_trans_l1.shape[1]})

data_l2 = pd.DataFrame({'Predicted labels before feature engineering':pred_l2_1, 'Predicted labels after feature engineering':pred_3_l2, 'No of new features':x_t_trans_l2.shape[1]})

data_l3 = pd.DataFrame({'Predicted labels before feature engineering':pred_l3_1, 'Predicted labels after feature engineering':pred_3_l3, 'No of new features':x_t_trans_l3.shape[1]})

data_l4 = pd.DataFrame({'Predicted labels before feature engineering':pred_l4_1, 'Predicted labels after feature engineering':pred_3_l4, 'No of new features':x_t_trans_l3.shape[1]})

data_l1

for i in range (x_train_trans_l1.shape[1]):
  data_l1['new_feature_'+str(i+1)] = x_train_trans_l1[i]

for i in range (x_train_trans_l2.shape[1]):
  data_l2['new_feature_'+str(i+1)] = x_train_trans_l2[i]

for i in range (x_train_trans_l3.shape[1]):
  data_l3['new_feature_'+str(i+1)] = x_train_trans_l3[i]

for i in range (x_train_trans_l4.shape[1]):
  data_l4['new_feature_'+str(i+1)] = x_train_trans_l4[i]

data_l1

data_l2

data_l3

data_l4

data_l1.to_csv('/content/drive/MyDrive/ML_LAB_1/label1.csv', index=False)

data_l1.to_csv('/content/drive/MyDrive/ML_LAB_1/label2.csv', index=False)

data_l1.to_csv('/content/drive/MyDrive/ML_LAB_1/label3.csv', index=False)

data_l1.to_csv('/content/drive/MyDrive/ML_LAB_1/label4.csv', index=False)